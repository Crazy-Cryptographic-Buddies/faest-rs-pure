use sha3::{
    digest::{ExtendableOutput, Update, XofReader},
    Shake128, Shake128Reader, Shake256, Shake256Reader,
};

use crate::utils::Reader;

pub(crate) trait RandomOracle {
    type Hasher<const SEP: u8>: Hasher + Default;

    /// Create hasher for `H0`
    fn h0_init() -> Self::Hasher<0> {
        Self::Hasher::default()
    }

    /// Create hasher for `H1`
    fn h1_init() -> Self::Hasher<1> {
        Self::Hasher::default()
    }

    /// Create hasher for `H2`
    fn h2_init() -> Self::Hasher<2> {
        Self::Hasher::default()
    }

    /// Create hasher for `H3`
    fn h3_init() -> Self::Hasher<3> {
        Self::Hasher::default()
    }
}

/// Interface for hashers associated ot the random oracles
pub(crate) trait Hasher {
    /// Digest reader
    type Reader: Reader;

    /// Hash additional bytes
    fn update(&mut self, data: &[u8]);

    /*
       /// Hash additional bytes obtained from an iterator
       fn update_from_iterator<I>(&mut self, it: I)
       where
           I: Iterator<Item = u8>,
       {
           const BUFFER_LEN: usize = 64;

           let mut idx = 0;
           let mut buffer = [0u8; BUFFER_LEN];
           for v in it {
               buffer[idx % BUFFER_LEN] = v;
               idx += 1;
               if idx % BUFFER_LEN == 0 {
                   self.update(&buffer);
               }
           }

           if idx % BUFFER_LEN != 0 {
               self.update(&buffer[..idx % BUFFER_LEN]);
           }
       }
    */

    /// Finish hashing
    fn finish(self) -> Self::Reader;
}

pub(crate) struct RandomOracleShake128 {}

/// Hasher based on `SHAKE128`
#[derive(Debug, Default)]
pub(crate) struct Hasher128<const SEP: u8> {
    hasher: Shake128,
}

pub(crate) struct Hasher128Reader(Shake128Reader);

impl Reader for Hasher128Reader {
    fn read(&mut self, dst: &mut [u8]) {
        self.0.read(dst);
    }
}

impl RandomOracle for RandomOracleShake128 {
    type Hasher<const SEP: u8> = Hasher128<SEP>;
}

impl<const SEP: u8> Hasher for Hasher128<SEP> {
    type Reader = Hasher128Reader;

    fn update(&mut self, data: &[u8]) {
        self.hasher.update(data);
    }

    fn finish(mut self) -> Self::Reader {
        self.hasher.update(&[SEP]);
        Hasher128Reader(self.hasher.finalize_xof())
    }
}

impl<const SEP: u8> Hasher for Hasher256<SEP> {
    type Reader = Hasher256Reader;

    fn update(&mut self, data: &[u8]) {
        self.hasher.update(data);
    }

    fn finish(mut self) -> Self::Reader {
        self.hasher.update(&[SEP]);
        Hasher256Reader(self.hasher.finalize_xof())
    }
}

pub(crate) struct RandomOracleShake256 {}

/// Hasher based on SHAKE256
#[derive(Default)]
pub(crate) struct Hasher256<const SEP: u8> {
    hasher: Shake256,
}

pub(crate) struct Hasher256Reader(Shake256Reader);

impl Reader for Hasher256Reader {
    fn read(&mut self, dst: &mut [u8]) {
        self.0.read(dst);
    }
}

impl RandomOracle for RandomOracleShake256 {
    type Hasher<const SEP: u8> = Hasher256<SEP>;
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_h0_128() {
        let input = [
            0x7c, 0xfe, 0xdd, 0xa0, 0x6e, 0x53, 0xb0, 0x8a, 0xf0, 0x18, 0x95, 0xa7, 0x89, 0xcd,
            0x36, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0,
        ];
        let output = [
            0x22, 0x7c, 0x56, 0xd9, 0xc5, 0x99, 0xcd, 0x1a, 0x20, 0x68, 0xa0, 0xc8, 0x50, 0x85,
            0x7c, 0xed, 0xfb, 0xdd, 0xf6, 0x83, 0x45, 0x59, 0x31, 0xbc, 0x62, 0x29, 0x33, 0x5d,
            0x89, 0x4e, 0x6f, 0x8c, 0x3c, 0x27, 0x37, 0x6a, 0xc1, 0x3f, 0x11, 0x7f, 0x6a, 0x3,
            0x62, 0x59, 0xc8, 0x5d, 0xf5, 0x5,
        ];

        let mut hasher = RandomOracleShake128::h0_init();
        hasher.update(&input);
        let mut reader = hasher.finish();
        let mut res = vec![0; output.len()];
        reader.read(&mut res);
        assert_eq!(res, output);
    }

    #[test]
    fn test_h0_256() {
        let input = [
            0xbc, 0xe, 0xfd, 0xb0, 0xf, 0x7b, 0xa4, 0x12, 0xc6, 0x72, 0xc7, 0xa2, 0x8a, 0x6e, 0x82,
            0x44, 0xf5, 0xc4, 0x82, 0xfd, 0x34, 0x61, 0x5c, 0xdd, 0xf1, 0xfb, 0xcd, 0x9d, 0x49,
            0x8e, 0x59, 0xde, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0,
        ];
        let output = [
            0xed, 0xa, 0xc9, 0x74, 0x14, 0x3e, 0x7a, 0x3e, 0xf, 0xb, 0x53, 0x3f, 0x86, 0x43, 0x2b,
            0xef, 0x6c, 0x15, 0x62, 0x8a, 0x5b, 0x44, 0xd9, 0x9, 0x2b, 0x6e, 0xb9, 0xd3, 0x9f,
            0xda, 0x33, 0x4d, 0x54, 0x8d, 0x7c, 0xf9, 0x88, 0x84, 0x27, 0xaf, 0x97, 0x15, 0xd4,
            0x95, 0xe8, 0xcb, 0x28, 0x2d, 0xb1, 0x7f, 0x85, 0x66, 0x9, 0xb2, 0x34, 0x51, 0xf1,
            0xf3, 0x30, 0x38, 0x27, 0x33, 0xc2, 0xf8, 0x2a, 0x1a, 0xe8, 0x34, 0x7e, 0xbb, 0x9b,
            0x3a, 0x6c, 0xb3, 0x60, 0xf8, 0xc9, 0xf4, 0x47, 0x72, 0x12, 0xec, 0xd1, 0xfe, 0x0,
            0xc1, 0xac, 0x9, 0x75, 0xe, 0x11, 0xc8, 0xf3, 0xf, 0xd8, 0x62,
        ];

        let mut hasher = RandomOracleShake256::h0_init();
        hasher.update(&input);
        let mut reader = hasher.finish();
        let mut res = vec![0; output.len()];
        reader.read(&mut res);
        assert_eq!(res, output);
    }

    #[test]
    fn test_h1_128() {
        let input = [
            0x8c, 0xee, 0xbb, 0x29, 0xff, 0x0, 0x29, 0xd5, 0xc0, 0x47, 0xce, 0x99, 0x5d, 0xea,
            0x94, 0x79, 0x54, 0xee, 0xdf, 0xa7, 0x4, 0x3b, 0x92, 0x53, 0x0, 0x84, 0x60, 0xbf, 0x3c,
            0x1c, 0xd, 0x15, 0x1d, 0x5c, 0x77, 0xba, 0xf7, 0xed, 0x55, 0xa1, 0xa3, 0x85, 0x2e,
            0x4e, 0x78, 0x10, 0x31, 0x28, 0x6, 0xa0, 0xfb, 0xfc, 0xf7, 0x3b, 0x91, 0x85, 0xcc,
            0x80, 0x37, 0x16, 0x38, 0x1a, 0xe0, 0x78, 0x84, 0xe4, 0xfe, 0x97, 0xe3, 0x22, 0x7,
            0xe1, 0x75, 0xdb, 0x16, 0x17, 0xb9, 0x22, 0x3b, 0x26, 0x55, 0x10, 0x28, 0x41, 0x2f,
            0x6f, 0xa7, 0xfd, 0x1b, 0x36, 0x77, 0x61, 0x7b, 0x2d, 0x79, 0x6, 0x5f, 0xbe, 0x2d,
            0xfa, 0x20, 0x3f, 0x2d, 0x56, 0x3c, 0x3e, 0x23, 0xa1, 0xec, 0xc5, 0xa4, 0xcc, 0x9d,
            0x95, 0x6a, 0xc0, 0xe7, 0x97, 0xef, 0x49, 0xe0, 0x6d, 0x10, 0x65, 0x16, 0x8c, 0x80,
            0xa6, 0xfb, 0xdd, 0xf6, 0x83, 0x45, 0x59, 0x31, 0xbc, 0x62, 0x29, 0x33, 0x5d, 0x89,
            0x4e, 0x6f, 0x8c, 0x3c, 0x27, 0x37, 0x6a, 0xc1, 0x3f, 0x11, 0x7f, 0x6a, 0x3, 0x62,
            0x59, 0xc8, 0x5d, 0xf5, 0x5, 0x3a, 0xa, 0x8e, 0xfa, 0x15, 0x64, 0x6e, 0x90, 0xa0, 0x1d,
            0x42, 0x34, 0x38, 0x57, 0xa7, 0x66, 0x7b, 0x92, 0xd1, 0x85, 0x3d, 0xf4, 0x25, 0x7e,
            0x42, 0xe1, 0xfb, 0x84, 0x9f, 0xcd, 0x75, 0xec, 0xd, 0xb9, 0xba, 0xd6, 0x69, 0x71,
            0x9e, 0xfd, 0x66, 0x32, 0xa2, 0x81, 0x77, 0x8f, 0x89, 0x3f, 0x51, 0x64, 0xc1, 0x7f,
            0xe1, 0xc5, 0xa6, 0x11, 0xba, 0x48, 0x6b, 0x94, 0xf5, 0x91, 0xb8, 0x14, 0x18, 0x67,
            0xa, 0x30, 0xe9, 0xe1, 0x4f, 0x3c, 0x98, 0x88, 0x54, 0xd, 0x74, 0x68, 0x5e, 0x22, 0x86,
            0x2b, 0x80, 0xff, 0xbe, 0x36, 0x76, 0x8, 0x98, 0xdf, 0x66, 0x54, 0x89, 0x63, 0x6a,
            0xb2, 0x8e, 0x89, 0xd3, 0x61, 0xa0, 0x86, 0x43, 0xc2, 0xec, 0x6a, 0xc1, 0x20, 0xdc,
            0x64, 0x46, 0x42, 0x83, 0x5d, 0xdc, 0xd1, 0xef, 0xc9, 0x2e, 0xad, 0xe3, 0x1a, 0xda,
            0xc9, 0xa9, 0xe6, 0x5c, 0xa, 0x16, 0x6, 0x2d, 0x91, 0xb7, 0x89, 0xf3, 0x32, 0x16, 0x14,
            0x1e, 0xb7, 0x6f, 0xb, 0xd3, 0xb, 0x49, 0x1b, 0xff, 0x1d, 0xf5, 0xd2, 0x99, 0xa1, 0xa4,
            0x9f, 0x16, 0x61, 0xee, 0xda, 0x96, 0xcc, 0xe1, 0x5f, 0x5a, 0xbb, 0x34, 0xf8, 0x17,
            0xf4, 0xbc, 0x79, 0xfc, 0xb8, 0x60, 0xb5, 0x52, 0xef, 0x61, 0x96, 0x68, 0xa1, 0xb5,
            0xbe, 0xdf, 0xc4, 0x3e, 0x1a, 0x63, 0x6a, 0xd3, 0xf9, 0x5f, 0xf7, 0xa3, 0xab, 0x95,
            0x6b, 0x27, 0xf4, 0x5d, 0xd0, 0x86, 0x72, 0x3, 0x69, 0x2, 0xc, 0xf0, 0xb5, 0x16, 0x8d,
            0x87, 0xda, 0x17, 0xb2, 0xb, 0xeb, 0x59, 0xbd, 0x0, 0xe9, 0x24, 0xfe, 0x63, 0xdf, 0x4a,
            0x1a, 0x0, 0xb9, 0x2, 0x97, 0x96, 0x64, 0x19, 0xf3, 0xb8, 0xe4, 0x76, 0x5, 0x3b, 0x91,
            0x12, 0xd9, 0xe5, 0xcc, 0xa8, 0x5f, 0xa2, 0x64, 0x4a, 0x16, 0x85, 0x90, 0x8c, 0x98,
            0xe8, 0xb5, 0x75, 0x60, 0xce, 0xb, 0xb5, 0xb, 0xed, 0x92, 0xf, 0x68, 0x1d, 0xaf, 0x8a,
            0x87, 0x47, 0x0, 0xfb, 0xb7, 0x3f, 0x97, 0x79, 0x29, 0x2a, 0x85, 0xbe, 0x8f, 0xed,
            0xc5, 0xda, 0x4e, 0xd0, 0x2c, 0xa3, 0x7a, 0x98, 0x2f, 0xfa, 0x99, 0x6d, 0x79, 0x9d,
            0x1d, 0x6d, 0xd1, 0xc2, 0x48, 0x5a, 0x16, 0xaa, 0xe0, 0x35, 0xf8, 0x22, 0x1b, 0xe7,
            0x7, 0xae, 0x1b, 0x86, 0xb0, 0xc4, 0x2c, 0xed, 0xd, 0x9b, 0x23, 0xc3, 0xe5, 0xab, 0x72,
            0x8d, 0x5e, 0xf7, 0x8b, 0x12, 0x2d, 0x6c, 0x10, 0xef, 0x1d, 0x9b, 0x2, 0x4d, 0xa6,
            0x7d, 0x37, 0x92, 0x1f, 0x46, 0xda, 0x37, 0x10, 0xec, 0x23, 0xda, 0x5,
        ];
        let output = [
            0x8, 0x73, 0x77, 0x6a, 0xbe, 0xaf, 0x71, 0x9c, 0x24, 0x4e, 0x21, 0x8, 0x1d, 0x44, 0x1c,
            0x7c, 0x44, 0x1e, 0x36, 0xd, 0x75, 0xa, 0xe1, 0xc0, 0x0, 0x35, 0x58, 0x19, 0xa1, 0x71,
            0x9f, 0xf8,
        ];

        let mut hasher = RandomOracleShake128::h1_init();
        hasher.update(&input);
        let mut reader = hasher.finish();
        let mut res = vec![0; output.len()];
        reader.read(&mut res);
        assert_eq!(res, output);
    }

    #[test]
    fn test_h1_256() {
        let input = [
            0x4e, 0xb1, 0xa4, 0x35, 0xc1, 0xdd, 0xee, 0x64, 0x5e, 0x2, 0xe0, 0xf0, 0xf, 0x60, 0xf,
            0x3b, 0xe0, 0x3c, 0xd6, 0x90, 0x50, 0x75, 0x57, 0x4f, 0x13, 0xc6, 0x3d, 0x6c, 0xc0,
            0xd4, 0xfe, 0xcf, 0xb4, 0x88, 0xbc, 0xaf, 0x11, 0xcf, 0x9c, 0x46, 0xa9, 0xb9, 0xc,
            0x8c, 0x8c, 0x53, 0xdc, 0x52, 0xa6, 0x3a, 0x96, 0xfa, 0x3d, 0xfc, 0x7, 0xa8, 0x30,
            0xb3, 0x19, 0x76, 0x4b, 0xf5, 0xff, 0x8d, 0x8a, 0xb9, 0xae, 0xc6, 0xe7, 0x7e, 0x17,
            0x3a, 0x64, 0xa2, 0x66, 0x8b, 0xd4, 0x91, 0xf1, 0xf7, 0xaf, 0xb9, 0xf3, 0xef, 0xbb,
            0xb5, 0x93, 0x22, 0xd5, 0xb8, 0x37, 0xf0, 0xd5, 0x49, 0x57, 0x0, 0x13, 0x39, 0xca,
            0x3e, 0xb1, 0x96, 0xb1, 0x43, 0x57, 0x7f, 0x3b, 0xea, 0x1f, 0x9a, 0x4c, 0x57, 0x93,
            0xb2, 0x1c, 0x8b, 0x2b, 0x3d, 0x36, 0x6f, 0xa6, 0x54, 0x1, 0x23, 0xc1, 0x4e, 0x73,
            0xe6, 0x8b, 0x75, 0x17, 0xc4, 0xbd, 0x2c, 0xd1, 0xff, 0xeb, 0x69, 0xf1, 0xf3, 0xeb,
            0x24, 0x99, 0x3d, 0x65, 0x4a, 0x4a, 0xc3, 0xcb, 0x73, 0xf, 0x6a, 0xa9, 0xbb, 0xdb,
            0xcf, 0x2b, 0xad, 0x96, 0xe9, 0x7a, 0xbd, 0x5d, 0xc6, 0x72, 0xcf, 0xef, 0x25, 0xf5,
            0x45, 0x65, 0x2b, 0x28, 0xea, 0xe4, 0x3c, 0x88, 0x9b, 0xb1, 0xb8, 0x7, 0xe0, 0xf6,
            0x87, 0x79, 0xf7, 0xff, 0xd7, 0x64, 0x7c, 0xd5, 0x48, 0xd1, 0x4c, 0xb2, 0x33, 0xec,
            0x86, 0xe6, 0xc4, 0x4a, 0x95, 0xa0, 0x23, 0xab, 0xa8, 0xb, 0x17, 0x94, 0xe4, 0xaa,
            0x68, 0x27, 0xf, 0xa6, 0x80, 0x86, 0x88, 0xf7, 0xb6, 0xcf, 0x96, 0xc, 0x5e, 0x9d, 0x4e,
            0x45, 0x63, 0x97, 0xfd, 0x14, 0x29, 0x54, 0xed, 0x33, 0xda, 0xd7, 0x5f, 0xd7, 0xfd,
            0x52, 0x90, 0xa1, 0xd5, 0xda, 0xbd, 0xb, 0x32, 0x35, 0x5e, 0x90, 0x74, 0xdf, 0xff,
            0x7a, 0xad, 0x92, 0x7, 0xcf, 0x22, 0xb1, 0x31, 0xc9, 0x1a, 0x69, 0x14, 0x86, 0x74,
            0x55, 0x96, 0x69, 0xa4, 0x3b, 0x41, 0x6e, 0xdf, 0x79, 0x68, 0xad, 0x3c, 0x53, 0x15,
            0x9c, 0x8b, 0x8e, 0xc0, 0xd, 0x5c, 0xce, 0xd1, 0xcb, 0x57, 0x54, 0xf5, 0x2, 0xb0, 0x70,
            0x81, 0x60, 0xb3, 0x84, 0x7d, 0xfa, 0x0, 0x51, 0xe8, 0x1b, 0x70, 0xa5, 0x5d, 0x64,
            0x29, 0xeb, 0x7, 0xc3, 0xec, 0x61, 0x19, 0xa8, 0xbe, 0xec, 0xc0, 0x5c, 0xaa, 0xf0,
            0xd9, 0xfd, 0x91, 0x68, 0xd1, 0xfb, 0x1, 0x9f, 0x9c, 0xcf, 0xcc, 0x89, 0xad, 0x90,
            0xfd, 0x5a, 0xdf, 0x83, 0x85, 0x55, 0x6f, 0xa8, 0xb9, 0x9a, 0x20, 0x90, 0x7b, 0x20,
            0x8c, 0x8d, 0xc2, 0x18, 0x25, 0x50, 0x82, 0xe2, 0x60, 0x1e, 0xe4, 0x13, 0x33, 0x42,
            0xa, 0x3f, 0xeb, 0x58, 0x1d, 0x61, 0x76, 0x10, 0x77, 0x66, 0xa1, 0xaa, 0xd2, 0x2a,
            0x31, 0x6, 0x1b, 0x13, 0xd6, 0x3e, 0x17, 0x41, 0xed, 0x9f, 0x1, 0xe4, 0x67, 0xb9, 0x14,
            0x99, 0xe5, 0xf1, 0x6d, 0xd9, 0x71, 0xa6, 0xa2, 0x24, 0x6e, 0x8d, 0xc1, 0x25, 0x2d,
            0x93, 0xb3, 0x9, 0xb4, 0xa8, 0x43, 0x22, 0x37, 0x86, 0x47, 0x43, 0xa, 0xe2, 0x14, 0x23,
            0xa8, 0x61, 0x98, 0xca, 0x2f, 0xda, 0xaa, 0x96, 0x64, 0x6a, 0x77, 0x43, 0x7e, 0xc3,
            0xba, 0x99, 0x9c, 0x31, 0x1e, 0x74, 0x3c, 0xb9, 0x69, 0x7e, 0xc4, 0xce, 0xf2, 0x37,
            0xb2, 0xc4, 0xea, 0xf7, 0x76, 0xba, 0x8e, 0x8, 0x59, 0x76, 0xc, 0x5, 0x9a, 0x29, 0xb0,
            0x71, 0x9d, 0x6f, 0xac, 0x60, 0x2a, 0x1b, 0x91, 0x87, 0x87, 0x65, 0x23, 0x46, 0xea,
            0x96, 0x8e, 0x9f, 0xaa, 0x2d, 0x59, 0x2c, 0x81, 0x3d, 0x99, 0x76, 0x62, 0xd1, 0xf,
            0xe5, 0x22, 0x48, 0x6a, 0x2a, 0x22, 0x77, 0x49, 0x80, 0xd4, 0x1, 0x32, 0xed, 0x89,
            0xbc, 0x31, 0xc5, 0x8, 0xc9, 0xcb, 0xf6, 0xca, 0xaf, 0xbf, 0x68, 0x3, 0xeb, 0xcd, 0xcf,
            0x76, 0x74, 0xe9, 0x40, 0xc3, 0xbc, 0xe2, 0x99, 0x76, 0xee, 0x32, 0x6c, 0xf2, 0xb4,
            0x32, 0x87, 0x46, 0xd9, 0x85, 0x8b, 0x35, 0x1f, 0xce, 0x79, 0x42, 0xdb, 0xa, 0xe6,
            0xcd, 0xe3, 0x3e, 0x3, 0x93, 0x32, 0xe, 0x7e, 0x18, 0x18, 0x65, 0x7, 0x14, 0x66, 0x6d,
            0x7, 0xf2, 0x6e, 0x3, 0x53, 0xbc, 0x17, 0x5d, 0x24, 0x45, 0xba, 0x40, 0xde, 0x40, 0xea,
            0xde, 0xbb, 0xef, 0x5, 0xb, 0x9d, 0xa, 0xf5, 0x7c, 0x2f, 0x7, 0x98, 0x1e, 0xc5, 0xe3,
            0x4a, 0xe8, 0x6a, 0x87, 0x3e, 0x73, 0xc4, 0x2f, 0xe4, 0x8d, 0x57, 0xe4, 0x43, 0x80,
            0x71, 0x93, 0xab, 0xca, 0xa, 0xa2, 0x3f, 0x97, 0x91, 0xa, 0xf, 0xcd, 0x25, 0xc1, 0x97,
            0x6, 0x40, 0x1f, 0x32, 0x78, 0xf7, 0xec, 0x7d, 0x75, 0x5a, 0xc6, 0xc6, 0x4, 0xaf, 0xc9,
            0x94, 0x36, 0x53, 0x38, 0x5f, 0x5a, 0xff, 0xa7, 0x94, 0x81, 0xef, 0x39, 0xc8, 0x8e,
            0x9, 0x9e, 0x3c, 0x38, 0x43, 0xbe, 0x7, 0x8e, 0x7d, 0x78, 0x98, 0xc7, 0x72, 0x61, 0xaf,
            0x1e, 0xcf, 0x1, 0x64, 0xfe, 0x38, 0x7d, 0xb0, 0xde, 0xe2, 0x64, 0xe3, 0x25, 0xb1,
            0x58, 0xe7, 0x8f, 0xa9, 0x26, 0x66, 0xdd, 0xec, 0xd6, 0x44, 0x13, 0xc5, 0x8b, 0x5e,
            0xd, 0x3b, 0xd3, 0xd0, 0x28, 0xc5, 0x25, 0x16, 0xff, 0x5e, 0xbf, 0x18, 0xa3, 0xc5,
            0xb2, 0xe8, 0x1d, 0x82, 0xfb, 0xaf, 0x92, 0xce, 0x9, 0x43, 0xef, 0xd7, 0xb4, 0x47,
            0x4b, 0x4c, 0xdb, 0xf7, 0xda, 0xe2, 0x41, 0xb2, 0xc5, 0x55, 0xfc, 0x73, 0x20, 0xc5,
            0x8b, 0xa, 0x85, 0x6e, 0x3e, 0x5a, 0x9d, 0x10, 0x49, 0xc5, 0xde, 0x3d, 0x3c, 0xc, 0xcc,
            0x15, 0xf0, 0xe0, 0x13, 0x6, 0x31, 0x3a, 0x56, 0x3e, 0xdc, 0x90, 0x99, 0x25, 0x97,
            0xfd, 0x23, 0x80, 0x52, 0x23, 0xd3, 0x6, 0x3d, 0x38, 0xbf, 0x4f, 0xb6, 0x67, 0x8c,
            0x44, 0x73, 0x74, 0xa9, 0x29, 0xca, 0x68, 0xde, 0x4f, 0xf0, 0x39, 0x2e, 0xa8, 0xf0,
            0xbc, 0x98, 0xe, 0x55, 0x97, 0x8, 0xa0, 0x7e, 0x65, 0xc2, 0x92, 0xf2, 0xfb, 0x55, 0xa3,
            0xd5, 0xe, 0x5a, 0xf2, 0xe9, 0x1e, 0x32, 0x46, 0x27, 0xd3, 0x47, 0x4, 0x3, 0xea, 0xcf,
            0xc5, 0xc5, 0x49, 0x96, 0x30, 0x54, 0xb4, 0x3b, 0x58, 0xfa, 0x95, 0x8c, 0x61, 0x91,
            0xa5, 0x1d, 0xa2, 0x54, 0x75, 0x3a, 0x4b, 0xaf, 0x1b, 0xb5, 0xf1, 0x18, 0xe5, 0xcb,
            0x7a, 0x87, 0xa1, 0x4f, 0xb9, 0x8f, 0x6, 0x75, 0xd6, 0xf7, 0x94, 0x87, 0x8a, 0xdd,
            0x70, 0x86, 0xed, 0xf5, 0xa, 0x1, 0xe0, 0x4b, 0x74, 0x19, 0xe, 0xc7, 0x89, 0x9, 0xce,
            0xf6, 0x46, 0x9b, 0x2, 0xaa, 0x32, 0x34, 0x86, 0xdc, 0xe7, 0x5a, 0x35, 0xca, 0xed,
            0x32, 0x7c, 0x1, 0x24, 0x53, 0x3a, 0x27, 0x6d, 0xff, 0x66, 0x4e, 0xc1, 0xf7, 0x38,
            0x1f, 0xbf, 0xd6, 0xc8, 0x56, 0x89, 0x82, 0x90, 0xe9, 0xcd, 0xd5, 0xaf, 0x59, 0x3e,
            0x0, 0xc6, 0x11, 0x5d, 0x19, 0x72, 0x42, 0x75, 0x8d, 0x69, 0xd2, 0x15, 0x7c, 0xf3,
            0x48, 0x33, 0x78, 0x90, 0xd7, 0x2f, 0x2d, 0xd0, 0x54, 0x9a, 0x6, 0xfa, 0xfa, 0x35,
            0x75, 0xee, 0x9c, 0xd, 0x83, 0x3a, 0x26, 0xb, 0x6f, 0x1e, 0x65, 0xd3, 0x6b, 0xd9, 0x5,
            0x11, 0x29, 0xd0, 0xd7, 0xb2, 0x47, 0x3, 0xf1, 0xa7, 0xd8, 0x4, 0xf7, 0xeb, 0xe1, 0xb1,
            0xd0, 0x20, 0x33, 0xf5, 0xa, 0x90, 0xc, 0x9d, 0xae, 0xe6, 0x4d, 0x20, 0xe7, 0xf7, 0x83,
            0xf1, 0x91, 0x37, 0x8d, 0x66, 0xb, 0x61, 0x67, 0x8d, 0x16, 0xea, 0x7c, 0x60, 0xa7,
            0x34, 0x3d, 0xe3, 0x1f, 0xc1, 0x77, 0x92, 0x14, 0x4a, 0xf0,
        ];
        let output = [
            0x2b, 0x62, 0xcf, 0xd, 0x86, 0xe9, 0x88, 0x81, 0x19, 0x60, 0x91, 0x7e, 0x3e, 0x1d,
            0x6b, 0x64, 0x6b, 0x41, 0xff, 0x77, 0xf0, 0x98, 0xa1, 0x33, 0xd6, 0xcf, 0x93, 0xff,
            0x9, 0x24, 0x16, 0xa7, 0xe3, 0x1e, 0x17, 0x36, 0x4d, 0x87, 0xe, 0x34, 0x78, 0x83, 0x2b,
            0xd2, 0xe2, 0xae, 0xd3, 0xe5, 0x69, 0xd5, 0x8d, 0x1e, 0xd2, 0x6c, 0x3c, 0x23, 0x6c,
            0x1c, 0xbc, 0xf2, 0xcf, 0x83, 0x56, 0x3,
        ];

        let mut hasher = RandomOracleShake256::h1_init();
        hasher.update(&input);
        let mut reader = hasher.finish();
        let mut res = vec![0; output.len()];
        reader.read(&mut res);
        assert_eq!(res, output);
    }
}
