use aes::cipher::{generic_array::GenericArray as GenericArray_0_14, KeyIvInit, StreamCipher};
use generic_array::{
    typenum::{U16, U24, U32},
    ArrayLength, GenericArray,
};
#[cfg(feature = "zeroize")]
use zeroize::ZeroizeOnDrop;

use crate::utils::Reader;

type Aes128Ctr128BE = ctr::Ctr128BE<aes::Aes128>;
type Aes192Ctr128BE = ctr::Ctr128BE<aes::Aes192>;
type Aes256Ctr128BE = ctr::Ctr128BE<aes::Aes256>;

pub(crate) type IVSize = U16;
pub(crate) type IV = GenericArray<u8, IVSize>;

/// Interface for the PRG
pub(crate) trait PseudoRandomGenerator: Sized + Reader {
    /// Size of the PRG key
    type Lambda: ArrayLength;

    /// Instantiate new PRG instance
    fn new_prg(k: &GenericArray<u8, Self::Lambda>, iv: &IV) -> Self;
}

#[cfg_attr(feature = "zeroize", derive(ZeroizeOnDrop))]
pub(crate) struct PRG128(Aes128Ctr128BE);

impl PseudoRandomGenerator for PRG128 {
    type Lambda = U16;

    fn new_prg(k: &GenericArray<u8, Self::Lambda>, iv: &IV) -> Self {
        Self(Aes128Ctr128BE::new(
            GenericArray_0_14::from_slice(k.as_slice()),
            GenericArray_0_14::from_slice(iv.as_slice()),
        ))
    }
}

impl Reader for PRG128 {
    fn read(&mut self, dst: &mut [u8]) {
        self.0.apply_keystream(dst);
    }
}

#[cfg_attr(feature = "zeroize", derive(ZeroizeOnDrop))]
pub(crate) struct PRG192(Aes192Ctr128BE);

impl PseudoRandomGenerator for PRG192 {
    type Lambda = U24;

    fn new_prg(k: &GenericArray<u8, Self::Lambda>, iv: &IV) -> Self {
        Self(Aes192Ctr128BE::new(
            GenericArray_0_14::from_slice(k.as_slice()),
            GenericArray_0_14::from_slice(iv.as_slice()),
        ))
    }
}

impl Reader for PRG192 {
    fn read(&mut self, dst: &mut [u8]) {
        self.0.apply_keystream(dst);
    }
}

#[cfg_attr(feature = "zeroize", derive(ZeroizeOnDrop))]
pub(crate) struct PRG256(Aes256Ctr128BE);

impl PseudoRandomGenerator for PRG256 {
    type Lambda = U32;

    fn new_prg(k: &GenericArray<u8, Self::Lambda>, iv: &IV) -> Self {
        Self(Aes256Ctr128BE::new(
            GenericArray_0_14::from_slice(k.as_slice()),
            GenericArray_0_14::from_slice(iv.as_slice()),
        ))
    }
}

impl Reader for PRG256 {
    fn read(&mut self, dst: &mut [u8]) {
        self.0.apply_keystream(dst);
    }
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_prg128() {
        let key = GenericArray::from_array([
            0x9d, 0x79, 0xb1, 0xa3, 0x7f, 0x31, 0x80, 0x1c, 0xd1, 0x1a, 0x67, 0x06, 0xfb, 0x40,
            0xd6, 0xbd,
        ]);
        let iv = IV::from_array([
            0x97, 0x67, 0xc2, 0x18, 0x8e, 0x12, 0xe6, 0x5b, 0x13, 0x64, 0xf5, 0xd8, 0x71, 0x7b,
            0x0d, 0x58,
        ]);
        let output = [
            0xa9, 0x90, 0x49, 0x6c, 0x14, 0x26, 0xdf, 0x4c, 0x7c, 0xe2, 0xbf, 0x76, 0x19, 0xdb,
            0x54, 0x83, 0x85, 0x0f, 0x80, 0x28, 0x85, 0xa3, 0x96, 0xb8, 0x2a, 0x31, 0x87, 0x2b,
            0x4e, 0x32, 0xe8, 0x0c, 0x9e, 0x1f, 0xa7, 0xb9, 0x1b, 0xe1, 0x35, 0x7e, 0x68, 0x98,
            0x73, 0x68, 0x5a, 0xd3, 0xd7, 0xe8, 0x3e, 0x36, 0x99, 0x99, 0x6c, 0x2d, 0x02, 0x07,
            0xd4, 0x13, 0xa9, 0xf3, 0x00, 0x16, 0x68, 0x6a, 0xf0, 0x99, 0x7b, 0x1b, 0x89, 0x62,
            0x54, 0xf6, 0x2a, 0xfa, 0x22, 0xc6, 0x0f, 0xd2, 0x72, 0x5d, 0x93, 0xf4, 0x4b, 0x06,
            0xa8, 0xcb, 0x87, 0x56, 0xff, 0xaf, 0x1f, 0xcd, 0xc5, 0x9c, 0xde, 0xe3, 0x99, 0x4b,
            0xa7, 0x50, 0xa0, 0x94, 0xcf, 0x32, 0xba, 0x35, 0x7b, 0x8f, 0x43, 0x72, 0x98, 0xa0,
            0x4e, 0x24, 0x23, 0xb8, 0xb6, 0xfe, 0xa7, 0x33, 0x31, 0x57, 0x1a, 0x62, 0xaf, 0xae,
            0x04, 0x61, 0x3a, 0x06, 0xd7, 0x1f, 0xd9, 0x57, 0x8c, 0x72, 0x6b, 0x69, 0x4b, 0xde,
            0x6a, 0x39, 0xf8, 0x0a, 0x03, 0x96, 0xa0, 0xa8, 0x6b, 0x54, 0x44, 0x48, 0x92, 0x55,
            0x28, 0xfb, 0xa5, 0x6c, 0x08, 0x39, 0x31, 0x32, 0x5c, 0x36, 0x39, 0x94, 0x94, 0x6d,
            0x94, 0x57, 0x93, 0x30, 0x5e, 0x62, 0xec, 0xd4, 0xfb, 0xe1, 0xb7, 0x3f, 0xb0, 0x13,
            0x12, 0xcf, 0x0e, 0x85, 0xc0, 0xe3, 0x54, 0x42, 0xf5, 0x68, 0xc6, 0x83, 0x91, 0x93,
            0x79, 0xa0, 0x27, 0xbe, 0xd7, 0xb5, 0x2e, 0x57, 0x35, 0xea, 0xb9, 0x67, 0xd9, 0x63,
            0xd1, 0xb7, 0xc5, 0xe9, 0xee, 0x7e, 0x66, 0x75, 0xfb, 0x12, 0x5c, 0x97, 0x0c, 0xe5,
            0x47, 0x53, 0x49, 0x87, 0x80, 0xbd, 0x2a, 0x7f, 0xe2, 0xb0, 0x5e, 0xc4, 0xf4, 0x7b,
            0xdd, 0xda,
        ];

        let mut prg = PRG128::new_prg(&key, &iv);
        let mut res = [0; 240];
        prg.read(&mut res);
        assert_eq!(res, output);
    }

    #[test]
    fn test_prg192() {
        let key = GenericArray::from_array([
            0x50, 0xe1, 0x65, 0xe4, 0x34, 0x24, 0x9d, 0x8b, 0x82, 0x9f, 0x41, 0x16, 0x69, 0x84,
            0x2a, 0x97, 0x99, 0x11, 0x03, 0x6c, 0xf3, 0xe8, 0x22, 0x08,
        ]);
        let iv = IV::from_array([
            0x97, 0x67, 0xc2, 0x18, 0x8e, 0x12, 0xe6, 0x5b, 0x13, 0x64, 0xf5, 0xd8, 0x71, 0x7b,
            0x0d, 0x58,
        ]);
        let output = [
            0x24, 0xaf, 0x24, 0x60, 0x6d, 0x3b, 0x92, 0x92, 0x16, 0x96, 0x8d, 0x4d, 0xaa, 0x36,
            0x39, 0x92, 0xf9, 0x83, 0x9f, 0x22, 0x08, 0x6c, 0x4c, 0xbb, 0x10, 0xa1, 0xac, 0x6d,
            0x5b, 0x88, 0x21, 0x9d, 0x37, 0x84, 0x96, 0x26, 0xd2, 0x5e, 0xbd, 0xb6, 0x7b, 0x7d,
            0xed, 0xd0, 0xaf, 0x74, 0xf0, 0x3b, 0xe1, 0x13, 0x62, 0x95, 0x04, 0xfe, 0x5a, 0x63,
            0x85, 0x4b, 0x2b, 0xa9, 0xdc, 0xd1, 0xbd, 0x90, 0x30, 0x87, 0x9d, 0x13, 0x70, 0x08,
            0x96, 0x6c, 0x61, 0xf8, 0x63, 0x93, 0x79, 0x75, 0x07, 0x71, 0xaa, 0x22, 0x94, 0xe0,
            0x01, 0xd8, 0xa1, 0x35, 0x42, 0x37, 0x82, 0xfd, 0x55, 0xaf, 0x5a, 0xf7, 0x38, 0xea,
            0xc8, 0x41, 0x54, 0xb9, 0x25, 0xb0, 0xc2, 0x09, 0x21, 0x67, 0x58, 0x73, 0x0b, 0xde,
            0x30, 0xc4, 0x64, 0x24, 0xc7, 0xb6, 0x4b, 0x74, 0x61, 0xfc, 0x46, 0x3c, 0xb8, 0xd4,
            0x79, 0xf8, 0x4f, 0x18, 0xa1, 0xf6, 0x4f, 0xb4, 0x14, 0xc7, 0xe6, 0xa7, 0x79, 0x0e,
            0x80, 0x34, 0xe8, 0xc1, 0x82, 0x13, 0x98, 0x87, 0x3a, 0x0b, 0x11, 0xa4, 0xf2, 0xee,
            0xa7, 0x2b, 0x79, 0xb5, 0xe5, 0x96, 0x6a, 0xa0, 0xe9, 0x6e, 0x29, 0xb1, 0xd4, 0x10,
            0x88, 0x78, 0xe6, 0xaa, 0xd1, 0x38, 0xf9, 0x38, 0xe4, 0xad, 0x4f, 0xf9, 0x6a, 0x80,
            0xde, 0x0e, 0xb6, 0x50, 0xeb, 0x08, 0xeb, 0x93, 0xca, 0xbd, 0x2f, 0x30, 0xa5, 0x18,
            0xed, 0x72, 0x4d, 0x34, 0x9c, 0x2c, 0x4a, 0x7b, 0x58, 0x05, 0x74, 0xb3, 0xf6, 0xc5,
            0xce, 0x25, 0xaa, 0x5a, 0xba, 0x3a, 0x62, 0xf0, 0x3b, 0x92, 0xe2, 0x45, 0x91, 0x29,
            0x63, 0xaa, 0xd2, 0x3b, 0xe6, 0x67, 0xc0, 0x8e, 0x4c, 0xf6, 0xda, 0x8d, 0x19, 0x2d,
            0x5a, 0x90,
        ];

        let mut prg = PRG192::new_prg(&key, &iv);
        let mut res = [0; 240];
        prg.read(&mut res);
        assert_eq!(res, output);
    }

    #[test]
    fn test_prg256() {
        let key = GenericArray::from_array([
            0xf6, 0x48, 0x81, 0x8b, 0xa4, 0xa6, 0x65, 0x6b, 0xe0, 0xcb, 0x6e, 0x38, 0x2a, 0x5d,
            0xff, 0x72, 0xac, 0x1d, 0xda, 0x96, 0x90, 0x81, 0x37, 0x47, 0x8b, 0xd5, 0x36, 0xcf,
            0x4b, 0x77, 0x8a, 0xde,
        ]);
        let iv = IV::from_array([
            0x97, 0x67, 0xc2, 0x18, 0x8e, 0x12, 0xe6, 0x5b, 0x13, 0x64, 0xf5, 0xd8, 0x71, 0x7b,
            0x0d, 0x58,
        ]);
        let output = [
            0xdf, 0x1e, 0xf4, 0x8c, 0xdb, 0xbb, 0xf1, 0xce, 0xff, 0x30, 0xa4, 0x56, 0x69, 0x97,
            0x1a, 0xcb, 0x85, 0xed, 0x83, 0x81, 0x0d, 0x76, 0x47, 0xb1, 0xee, 0xbd, 0xf9, 0x4b,
            0x4c, 0x10, 0x1d, 0xcc, 0xe3, 0x75, 0xfe, 0x13, 0x80, 0x56, 0x4f, 0x5f, 0xf8, 0x80,
            0xe6, 0xd8, 0x4f, 0x70, 0xc7, 0xba, 0x4c, 0x4d, 0x41, 0x5d, 0x3d, 0xf7, 0x94, 0xc7,
            0xa2, 0x4e, 0x5e, 0xab, 0x89, 0xa4, 0xbe, 0x26, 0x4b, 0xca, 0xee, 0xbe, 0x70, 0x32,
            0xfc, 0xc6, 0xf5, 0xe5, 0x3e, 0x1f, 0x9a, 0x1d, 0x0e, 0x82, 0x47, 0x76, 0x90, 0x78,
            0x23, 0x74, 0x49, 0x50, 0xe4, 0x5b, 0x81, 0xa3, 0xeb, 0x1d, 0x57, 0x04, 0xe9, 0x57,
            0xb9, 0xba, 0x2a, 0xfa, 0x10, 0x96, 0x44, 0xb4, 0x11, 0x9c, 0x53, 0xd1, 0xfa, 0xc2,
            0xb8, 0xa2, 0xb5, 0xcd, 0xd7, 0x87, 0xfc, 0xd8, 0x3f, 0x6e, 0xf0, 0xc9, 0x5e, 0xee,
            0x72, 0x27, 0x6c, 0xfa, 0x99, 0x9e, 0xcb, 0xeb, 0x8a, 0x78, 0x40, 0xdc, 0x1a, 0x87,
            0x5b, 0x11, 0x53, 0xe5, 0x8f, 0x6d, 0x53, 0xbb, 0xcc, 0x24, 0x92, 0x7f, 0x2e, 0xfc,
            0x74, 0x43, 0x32, 0xec, 0x23, 0x11, 0x58, 0xd9, 0x64, 0xb2, 0xa9, 0x8a, 0xe7, 0xe9,
            0x04, 0xbd, 0x08, 0xb0, 0x94, 0x16, 0xa4, 0x14, 0x93, 0x51, 0x2e, 0x02, 0x1a, 0x88,
            0xc7, 0x0e, 0xfa, 0xd6, 0xaa, 0xb9, 0x84, 0xa3, 0xe1, 0x5f, 0x50, 0xc0, 0x2b, 0x8e,
            0x1a, 0x7c, 0xdd, 0x24, 0x64, 0x63, 0x48, 0x48, 0x52, 0x6d, 0xb4, 0xe0, 0x72, 0xfe,
            0x84, 0xd0, 0x66, 0xfe, 0xb0, 0x97, 0x54, 0x5a, 0x3f, 0xf4, 0xeb, 0x0d, 0x70, 0x16,
            0xa5, 0x21, 0x51, 0x8f, 0x34, 0x63, 0x46, 0x62, 0x2c, 0x37, 0x50, 0xbc, 0x1e, 0x74,
            0x62, 0x63,
        ];

        let mut prg = PRG256::new_prg(&key, &iv);
        let mut res = [0; 240];
        prg.read(&mut res);
        assert_eq!(res, output);
    }
}
